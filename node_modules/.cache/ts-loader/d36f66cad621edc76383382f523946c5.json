{"remainingRequest":"/home/falexandre/git/vuetify-vuex-typescript-boilerplate/node_modules/babel-loader/lib/index.js!/home/falexandre/git/vuetify-vuex-typescript-boilerplate/node_modules/ts-loader/index.js??ref--13-2!/home/falexandre/git/vuetify-vuex-typescript-boilerplate/src/core/utils/FuncHelpers.ts","dependencies":[{"path":"/home/falexandre/git/vuetify-vuex-typescript-boilerplate/src/core/utils/FuncHelpers.ts","mtime":1570559778516},{"path":"/home/falexandre/git/vuetify-vuex-typescript-boilerplate/.babelrc","mtime":1570559778548},{"path":"/home/falexandre/git/vuetify-vuex-typescript-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":1568228101171},{"path":"/home/falexandre/git/vuetify-vuex-typescript-boilerplate/node_modules/babel-loader/lib/index.js","mtime":1568228098565},{"path":"/home/falexandre/git/vuetify-vuex-typescript-boilerplate/node_modules/ts-loader/index.js","mtime":1568228100966}],"contextDependencies":[],"result":["import moment from \"moment\";\nexport function isValid(value) {\n  if (value === null) {\n    return false;\n  }\n\n  const typeValue = typeof value;\n\n  switch (typeValue) {\n    case \"object\":\n      return Boolean(Object.entries(value).length);\n\n    case \"string\":\n      return Boolean(value.trim());\n\n    case \"undefined\":\n      return false;\n\n    default:\n      return true;\n  }\n}\nexport function invertFieldDate(value, outFormat = \"YYYY-MM-DD\") {\n  return moment(value).format(outFormat);\n}\nexport function objectToQueryStringParams(obj) {\n  return \"?\" + Object.keys(obj).reduce((a, k) => {\n    if (isValid(obj[k])) {\n      a.push(`${k}=${encodeURIComponent(obj[k])}`);\n    }\n\n    return a;\n  }, []).join(\"&\");\n}\n/**\n * https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-dollars-currency-string-in-javascript\n * numberFormat(12345678.9, 2, 3, \".\", \",\");  // \"12.345.678,90\"\n * numberFormat(123456.789, 4, 4, \" \", \":\");  // \"12 3456:7890\"\n * numberFormat(12345678.9, 0, 3, \"-\");       // \"12-345-679\"\n */\n\nexport function numberFormat(value = \"\", decimal = 2, wholePart = 3, thousandDelimiter = \"\", decimalDelimiter = \".\") {\n  value = value.replace(/[^\\d]+/g, \"\");\n  const re = \"\\\\d(?=(\\\\d{\" + (wholePart || 3) + \"})+\" + (decimal > 0 ? \"\\\\D\" : \"$\") + \")\",\n        num = parseInt(value, 10).toFixed(Math.max(0, decimal));\n  return (decimalDelimiter ? num.replace(\".\", decimalDelimiter) : num).replace(new RegExp(re, \"g\"), \"$&\" + (thousandDelimiter || \",\"));\n}\nexport function moneySave(val) {\n  const value = val.replace(\"R$ \", \"\");\n  value.replace(\".\", \"\");\n  return value.replace(\",\", \".\");\n}\nexport function moneyShow(val) {\n  const reais = val.toFixed(2).split(\".\");\n  reais[0] = `R$ ${reais[0].split(/(?=(?:...)*$)/).join(\".\")}`;\n  return reais.join(\",\");\n}\nexport function payloadValid(values) {\n  const payload = {};\n  Object.keys(values).filter(val => Array.isArray(values[val]) || isValid(values[val])).map(val => payload[val] = values[val]);\n  return payload;\n}\nexport function route(path, view, children, redirect) {\n  return {\n    path,\n    component: resolve => import(`@/pages/${view}.vue`).then(resolve),\n    children,\n    redirect\n  };\n}\nexport function importComponent(view) {\n  return {\n    component: resolve => import(`@/pages/${view}.vue`).then(resolve)\n  };\n}\nexport const set = property => (state, payload) => state[property] = payload;\nexport const setMerge = property => (state, payload) => state[property] = { ...state[property],\n  ...payload\n};\nexport const toggle = property => state => state[property] = !state[property];",{"version":3,"sources":["/home/falexandre/git/vuetify-vuex-typescript-boilerplate/src/core/utils/FuncHelpers.ts"],"names":["moment","isValid","value","typeValue","Boolean","Object","entries","length","trim","invertFieldDate","outFormat","format","objectToQueryStringParams","obj","keys","reduce","a","k","push","encodeURIComponent","join","numberFormat","decimal","wholePart","thousandDelimiter","decimalDelimiter","replace","re","num","parseInt","toFixed","Math","max","RegExp","moneySave","val","moneyShow","reais","split","payloadValid","values","payload","filter","Array","isArray","map","route","path","view","children","redirect","component","resolve","then","importComponent","set","property","state","setMerge","toggle"],"mappings":"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","sourcesContent":["import moment from \"moment\";\nexport function isValid(value) {\n    if (value === null) {\n        return false;\n    }\n    const typeValue = typeof (value);\n    switch (typeValue) {\n        case \"object\":\n            return Boolean(Object.entries(value).length);\n        case \"string\":\n            return Boolean(value.trim());\n        case \"undefined\":\n            return false;\n        default:\n            return true;\n    }\n}\nexport function invertFieldDate(value, outFormat = \"YYYY-MM-DD\") {\n    return moment(value).format(outFormat);\n}\nexport function objectToQueryStringParams(obj) {\n    return \"?\" + Object.keys(obj).reduce((a, k) => {\n        if (isValid(obj[k])) {\n            a.push(`${k}=${encodeURIComponent(obj[k])}`);\n        }\n        return a;\n    }, []).join(\"&\");\n}\n/**\n * https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-dollars-currency-string-in-javascript\n * numberFormat(12345678.9, 2, 3, \".\", \",\");  // \"12.345.678,90\"\n * numberFormat(123456.789, 4, 4, \" \", \":\");  // \"12 3456:7890\"\n * numberFormat(12345678.9, 0, 3, \"-\");       // \"12-345-679\"\n */\nexport function numberFormat(value = \"\", decimal = 2, wholePart = 3, thousandDelimiter = \"\", decimalDelimiter = \".\") {\n    value = value.replace(/[^\\d]+/g, \"\");\n    const re = \"\\\\d(?=(\\\\d{\" + (wholePart || 3) + \"})+\" + (decimal > 0 ? \"\\\\D\" : \"$\") + \")\", num = parseInt(value, 10).toFixed(Math.max(0, decimal));\n    return (decimalDelimiter ? num.replace(\".\", decimalDelimiter) : num)\n        .replace(new RegExp(re, \"g\"), \"$&\" + (thousandDelimiter || \",\"));\n}\nexport function moneySave(val) {\n    const value = val.replace(\"R$ \", \"\");\n    value.replace(\".\", \"\");\n    return value.replace(\",\", \".\");\n}\nexport function moneyShow(val) {\n    const reais = val.toFixed(2).split(\".\");\n    reais[0] = `R$ ${reais[0].split(/(?=(?:...)*$)/).join(\".\")}`;\n    return reais.join(\",\");\n}\nexport function payloadValid(values) {\n    const payload = {};\n    Object.keys(values)\n        .filter((val) => Array.isArray(values[val]) || isValid(values[val]))\n        .map((val) => payload[val] = values[val]);\n    return payload;\n}\nexport function route(path, view, children, redirect) {\n    return {\n        path,\n        component: (resolve) => import(`@/pages/${view}.vue`).then(resolve),\n        children,\n        redirect\n    };\n}\nexport function importComponent(view) {\n    return {\n        component: (resolve) => import(`@/pages/${view}.vue`).then(resolve),\n    };\n}\nexport const set = (property) => (state, payload) => (state[property] = payload);\nexport const setMerge = (property) => (state, payload) => (state[property] = { ...state[property], ...payload });\nexport const toggle = (property) => (state) => (state[property] = !state[property]);\n"]}]}